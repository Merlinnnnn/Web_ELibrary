package com.spkt.libraSys.service.chatbot.intent;

import com.spkt.libraSys.service.chatbot.IntentHandler;
import com.spkt.libraSys.service.chatbot.WebhookRequest;
import com.spkt.libraSys.service.chatbot.WebhookResponse;
import com.spkt.libraSys.service.openAI.OpenAIService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Service
public class ChatGPTIntentHandler implements IntentHandler {

    @Autowired
    private OpenAIService openAIService;

    @Override
    public String getIntentName() {
        return "ChatGPT_Generic";
    }

    @Override
    public String getToDesc() {
        return "Tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng th∆∞ vi·ªán s·ªë";
    }

    @Override
    public WebhookResponse handle(WebhookRequest request) {
        String userMessage = extractUserMessage(request);
        
        // T·∫°o prompt d·ª±a tr√™n ng·ªØ c·∫£nh v√† y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng
        String prompt = """
                B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng th∆∞ vi·ªán s·ªë. B·∫°n c√≥ th·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi c√°c ch·ª©c nƒÉng sau:

                1. T√¨m ki·∫øm v√† xem th√¥ng tin s√°ch:
                   - T√¨m s√°ch theo ti√™u ƒë·ªÅ (SearchBookByTitle)
                   - T√¨m s√°ch theo t√°c gi·∫£ (SearchBookByAuthor)
                   - Xem chi ti·∫øt s√°ch (BookDetails)
                   - Xem s√°ch ph·ªï bi·∫øn (SearchTopBook)
                   - T√≥m t·∫Øt s√°ch (SummarizeBook, SummarizeBookByTitle)

                2. Qu·∫£n l√Ω m∆∞·ª£n tr·∫£ s√°ch:
                   - M∆∞·ª£n s√°ch (BorrowBook)
                   - Tr·∫£ s√°ch (ReturnBook)
                   - Gia h·∫°n s√°ch (RenewBook)
                   - ƒê·∫∑t gi·ªØ s√°ch (ReserveBook)
                   - Ki·ªÉm tra s√°ch ƒëang m∆∞·ª£n (CheckBorrowedBooks)

                3. Th√¥ng tin th∆∞ vi·ªán:
                   - Gi·ªù m·ªü c·ª≠a (LibraryHours)
                   - Quy ƒë·ªãnh th∆∞ vi·ªán (LibraryRules)
                   - H∆∞·ªõng d·∫´n thanh to√°n (PaymentGuide)
                   - Ki·ªÉm tra ti·ªÅn ph·∫°t (CheckFine)

                4. H·ªó tr·ª£ chung:
                   - T∆∞ v·∫•n s√°ch ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nhu c·∫ßu
                   - Gi·∫£i th√≠ch c√°ch s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa th∆∞ vi·ªán
                   - H∆∞·ªõng d·∫´n quy tr√¨nh m∆∞·ª£n/tr·∫£ s√°ch
                   - Gi·ªõi thi·ªáu s√°ch m·ªõi ho·∫∑c s√°ch n·ªïi b·∫≠t
                   - Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ch√≠nh s√°ch th∆∞ vi·ªán
                   - H·ªó tr·ª£ t√¨m ki·∫øm t√†i li·ªáu h·ªçc t·∫≠p
                   - ƒê·ªÅ xu·∫•t s√°ch theo ch·ªß ƒë·ªÅ ho·∫∑c m√¥n h·ªçc
                   - Gi·∫£i th√≠ch c√°ch truy c·∫≠p t√†i li·ªáu s·ªë
                   - Th√¥ng tin v·ªÅ c√°c s·ª± ki·ªán v√† ho·∫°t ƒë·ªông c·ªßa th∆∞ vi·ªán

                Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng:
                %s

                H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, chuy√™n nghi·ªáp v√† h·ªØu √≠ch. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn m·ªôt ch·ª©c nƒÉng c·ª• th·ªÉ, h√£y h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng s·ª≠ d·ª•ng ch·ª©c nƒÉng ƒë√≥.
                """.formatted(userMessage);

        try {
            String response = openAIService.inferIntentFromUserQuery(prompt);
            
            // C√°c n√∫t t√°c v·ª• nhanh
            List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
                new WebhookResponse.QuickReply("üîç T√¨m s√°ch", "{\"eventName\": \"search_book\", \"parameters\": {}}"),
                new WebhookResponse.QuickReply("üìö M∆∞·ª£n s√°ch", "{\"eventName\": \"borrow_book\", \"parameters\": {}}"),
                new WebhookResponse.QuickReply("üìñ ƒê·∫∑t gi·ªØ s√°ch", "{\"eventName\": \"reserve_book\", \"parameters\": {}}"),
                new WebhookResponse.QuickReply("üíª T√†i li·ªáu s·ªë", "{\"eventName\": \"digital_docs\", \"parameters\": {}}"),
                new WebhookResponse.QuickReply("‚è∞ Gi·ªù m·ªü c·ª≠a", "{\"eventName\": \"LibraryHours\", \"parameters\": {}}")
            );

            // C√°c g·ª£i √Ω t√¨m ki·∫øm
            List<String> suggestions = Arrays.asList(
                "üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng th∆∞ vi·ªán",
                "üìû Li√™n h·ªá th·ªß th∆∞",
                "üìö S√°ch m·ªõi c·∫≠p nh·∫≠t",
                "üéØ S√°ch theo ch·ªß ƒë·ªÅ",
                "üìñ S√°ch theo m√¥n h·ªçc"
            );

            return createSuccessResponse(
                response != null ? response : "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.",
                quickReplies,
                null,
                null,
                suggestions
            );
        } catch (Exception e) {
            return createErrorResponse("Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá th·ªß th∆∞ ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.");
        }
    }

    private String extractUserMessage(WebhookRequest request) {
        // L·∫•y th√¥ng tin t·ª´ parameters
        Map<String, Object> parameters = request.getQueryResult().getParameters();
        return parameters != null ? parameters.toString() : "Kh√¥ng c√≥ y√™u c·∫ßu c·ª• th·ªÉ";
    }
}

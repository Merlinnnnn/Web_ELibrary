package com.spkt.libraSys.service.chatbot.intent;

import com.spkt.libraSys.service.chatbot.IntentHandler;
import com.spkt.libraSys.service.chatbot.WebhookRequest;
import com.spkt.libraSys.service.chatbot.WebhookResponse;
import com.spkt.libraSys.service.chatbot.annotation.RequiresAuth;
import com.spkt.libraSys.service.document.*;
import com.spkt.libraSys.service.document.PhysicalDocument.PhysicalDocumentEntity;
import com.spkt.libraSys.service.document.PhysicalDocument.PhysicalDocumentRepository;
import com.spkt.libraSys.service.document.viewer.ApprovalStatus;
import com.spkt.libraSys.service.loan.LoanEntity;
import com.spkt.libraSys.service.loan.LoanRepository;
import com.spkt.libraSys.service.loan.LoanStatus;
import com.spkt.libraSys.service.user.UserEntity;
import com.spkt.libraSys.service.user.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@RequiredArgsConstructor
@RequiresAuth(message = "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ m∆∞·ª£n s√°ch")
public class BorrowBookIntentHandler implements IntentHandler {
    private final DocumentRepository documentRepository;
    private final PhysicalDocumentRepository physicalDocumentRepository;
    private final LoanRepository loanRepository;
    private final UserRepository userRepository;
    private final DocumentService documentService;

    @Override
    public String getIntentName() {
        return "BorrowBook";
    }

    @Override
    public String getToDesc() {
        return "m∆∞·ª£n s√°ch";
    }

    private List<DocumentEntity> findBooksByTitle(String title) {
        Specification<DocumentEntity> spec = (root, query, criteriaBuilder) -> criteriaBuilder.and(
                criteriaBuilder.like(
                        criteriaBuilder.lower(root.get("documentName")),
                        "%" + title.toLowerCase() + "%"
                ),
                criteriaBuilder.or(
                        criteriaBuilder.equal(root.get("documentCategory"), DocumentCategory.PHYSICAL),
                        criteriaBuilder.equal(root.get("documentCategory"), DocumentCategory.BOTH)
                ),
                criteriaBuilder.equal(root.get("status"), DocumentStatus.ENABLED),
                criteriaBuilder.equal(root.get("approvalStatus"), ApprovalStatus.APPROVED)
        );

        return documentRepository.findAll(spec, PageRequest.of(0, 3)).getContent();
    }

    @Override
    public WebhookResponse handle(WebhookRequest request) {
        Map<String, Object> payload = request.getOriginalDetectIntentRequest().getPayload();
        String username = payload.get("username").toString();
        try {
            String bookTitle = getStringParameter(request, "bookTitle");
            if (bookTitle == null || bookTitle.trim().isEmpty()) {
                return createEmptyTitleResponse();
            }

            // T√¨m user theo email
            Optional<UserEntity> userOptional = userRepository.findByUsername(username);
            if (userOptional.isEmpty()) {
                return createUserNotFoundResponse(username);
            }

            UserEntity user = userOptional.get();

            // T√¨m s√°ch theo t√™n
            System.out.println("bookTitle: " + bookTitle);
            List<DocumentEntity> matchingBooks = findBooksByTitle(bookTitle);
            System.out.println("bookTitle: " + matchingBooks.size());
            if (matchingBooks.isEmpty()) {
                return createNoBookFoundResponse(bookTitle);
            }

            // T·∫°o danh s√°ch cards cho m·ªói cu·ªën s√°ch
            List<WebhookResponse.Card> cards = new ArrayList<>();
            for (DocumentEntity book : matchingBooks) {
                PhysicalDocumentEntity physicalBook = book.getPhysicalDocument();
                if (physicalBook != null) {
                    List<WebhookResponse.Button> buttons = Arrays.asList(
                        new WebhookResponse.Button(
                            "M∆∞·ª£n s√°ch",
                            "{\"physicalDocId\": \"" + physicalBook.getPhysicalDocumentId() + "\"}",
                            "POST",
                            "/api/v1/loans"
                        ),
                        new WebhookResponse.Button(
                            "Chi ti·∫øt s√°ch",
                            "{\"documentId\": \"" + book.getDocumentId() + "\"}",
                            "GET",
                            "/api/v1/documents/" + book.getDocumentId()
                        )
                    );

                    WebhookResponse.Card card = new WebhookResponse.Card(
                        book.getDocumentName(),
                        "C√≤n " + physicalBook.getAvailableCopies() + " b·∫£n c√≥ s·∫µn",
                        book.getCoverImage(),
                        buttons
                    );
                    cards.add(card);
                }
            }

            // Quick replies cho c√°c h√†nh ƒë·ªông ph·ªï bi·∫øn
            List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
                new WebhookResponse.QuickReply("üîç T√¨m s√°ch kh√°c", "{\"eventName\": \"SearchBookByTitle\", \"parameters\": {\"bookTitle\": \"\"}}"),
                new WebhookResponse.QuickReply("üìö Xem s√°ch m·ªõi", "{\"eventName\": \"SearchTopBook\", \"parameters\": {}}"),
                new WebhookResponse.QuickReply("‚è∞ Gi·ªù m·ªü c·ª≠a", "{\"eventName\": \"LibraryHours\", \"parameters\": {}}")
            );

            // Suggestions cho c√°c t√πy ch·ªçn kh√°c
            List<String> suggestions = Arrays.asList(
                "T√¨m s√°ch theo t√°c gi·∫£",
                "T√¨m s√°ch theo th·ªÉ lo·∫°i",
                "Xem s√°ch ƒëang m∆∞·ª£n"
            );

            return createSuccessResponse(
                "T√¨m th·∫•y " + cards.size() + " s√°ch ph√π h·ª£p v·ªõi t·ª´ kh√≥a \"" + bookTitle + "\". " +
                "Vui l√≤ng ch·ªçn s√°ch b·∫°n mu·ªën m∆∞·ª£n:",
                quickReplies,
                cards,
                null,
                suggestions
            );

        } catch (Exception e) {
            return createErrorResponse("ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu m∆∞·ª£n s√°ch. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
    }

    private WebhookResponse createEmptyTitleResponse() {
        List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
            new WebhookResponse.QuickReply("üîç T√¨m s√°ch", "{\"eventName\": \"SearchBookByTitle\", \"parameters\": {\"bookTitle\": \"\"}}"),
            new WebhookResponse.QuickReply("üìö Danh s√°ch s√°ch m·ªõi", "{\"eventName\": \"SearchTopBook\", \"parameters\": {}}"),
            new WebhookResponse.QuickReply("‚è∞ Gi·ªù m·ªü c·ª≠a", "{\"eventName\": \"LibraryHours\", \"parameters\": {}}")
        );

        List<String> suggestions = Arrays.asList(
            "T√¨m s√°ch theo t√°c gi·∫£",
            "T√¨m s√°ch theo th·ªÉ lo·∫°i",
            "Xem s√°ch ƒëang m∆∞·ª£n"
        );

        return createSuccessResponse(
            "Vui l√≤ng cung c·∫•p t√™n s√°ch b·∫°n mu·ªën m∆∞·ª£n.",
            quickReplies,
            null,
            null,
            suggestions
        );
    }

    private WebhookResponse createUserNotFoundResponse(String username) {
        List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
            new WebhookResponse.QuickReply("üìù ƒêƒÉng k√Ω", "{\"eventName\": \"DefaultWelcomeIntent\", \"parameters\": {}}"),
            new WebhookResponse.QuickReply("üìû Li√™n h·ªá h·ªó tr·ª£", "{\"eventName\": \"DefaultFallbackIntent\", \"parameters\": {}}"),
            new WebhookResponse.QuickReply("‚è∞ Gi·ªù m·ªü c·ª≠a", "{\"eventName\": \"LibraryHours\", \"parameters\": {}}")
        );

        List<String> suggestions = Arrays.asList(
            "Ki·ªÉm tra l·∫°i email",
            "Qu√™n m·∫≠t kh·∫©u",
            "H∆∞·ªõng d·∫´n ƒëƒÉng k√Ω"
        );

        return createSuccessResponse(
            "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi username " + username + ". Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi.",
            quickReplies,
            null,
            null,
            suggestions
        );
    }

    private WebhookResponse createNoBookFoundResponse(String bookTitle) {
        List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
            new WebhookResponse.QuickReply("üîç T√¨m s√°ch kh√°c", "{\"eventName\": \"SearchBookByTitle\", \"parameters\": {\"bookTitle\": \"\"}}"),
            new WebhookResponse.QuickReply("üìû Li√™n h·ªá th·ªß th∆∞", "{\"eventName\": \"DefaultFallbackIntent\", \"parameters\": {}}"),
            new WebhookResponse.QuickReply("‚è∞ Gi·ªù m·ªü c·ª≠a", "{\"eventName\": \"LibraryHours\", \"parameters\": {}}")
        );

        List<String> suggestions = Arrays.asList(
            "Ki·ªÉm tra l·∫°i t√™n s√°ch",
            "T√¨m s√°ch t∆∞∆°ng t·ª±",
            "ƒê·∫∑t tr∆∞·ªõc s√°ch"
        );

        return createSuccessResponse(
            "Xin l·ªói, ch√∫ng t√¥i kh√¥ng t√¨m th·∫•y s√°ch \"" + bookTitle + "\" trong th∆∞ vi·ªán. " +
            "Vui l√≤ng ki·ªÉm tra l·∫°i t√™n s√°ch ho·∫∑c li√™n h·ªá v·ªõi nh√¢n vi√™n th∆∞ vi·ªán ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
            quickReplies,
            null,
            null,
            suggestions
        );
    }
}

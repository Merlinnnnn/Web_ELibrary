package com.spkt.libraSys.service.chatbot.intent;

import com.spkt.libraSys.service.chatbot.IntentHandler;
import com.spkt.libraSys.service.chatbot.WebhookRequest;
import com.spkt.libraSys.service.chatbot.WebhookResponse;
import com.spkt.libraSys.service.document.DocumentService;
import com.spkt.libraSys.service.document.DocumentResponseDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class SearchBookByTitleIntentHandler implements IntentHandler {

    @Autowired
    private DocumentService documentService;

    @Override
    public String getIntentName() {
        return "SearchBookByTitle";
    }

    @Override
    public String getToDesc() {
        return "T√¨m ki·∫øm s√°ch theo ti√™u ƒë·ªÅ";
    }

    @Override
    public WebhookResponse handle(WebhookRequest request) {
        String bookTitle = getStringParameter(request, "bookTitle");
        if (bookTitle == null) {
            return createErrorResponse("Vui l√≤ng cung c·∫•p t√™n s√°ch c·∫ßn t√¨m");
        }
        System.out.println("searchBook:bookTitle: " + bookTitle);

        // T·∫°o PageRequest v·ªõi k√≠ch th∆∞·ªõc trang l√† 10 ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë·ªß s√°ch
        PageRequest pageRequest = PageRequest.of(0, 10);
        // L·∫•y danh s√°ch s√°ch v·ªõi th√¥ng tin c·∫ßn thi·∫øt
        Page<DocumentResponseDto> documents = documentService.getAllDocuments(pageRequest);
        
        if (documents.isEmpty()) {
            return createErrorResponse("Xin l·ªói, kh√¥ng t√¨m th·∫•y s√°ch n√†o v·ªõi ti√™u ƒë·ªÅ " + bookTitle);
        }

        List<WebhookResponse.Card> cards = new ArrayList<>();
        String searchTitle = bookTitle.toLowerCase();
        
        // T√¨m c√°c s√°ch c√≥ ti√™u ƒë·ªÅ g·∫ßn v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm
        List<DocumentResponseDto> relevantBooks = documents.getContent().stream()
            .filter(doc -> {
                String docTitle = doc.getDocumentName().toLowerCase();
                return docTitle.contains(searchTitle) || 
                       searchTitle.contains(docTitle) ||
                       calculateSimilarity(docTitle, searchTitle) > 0.5;
            })
            .collect(Collectors.toList());
            
        // N·∫øu kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p, l·∫•y th√™m s√°ch
        if (relevantBooks.isEmpty()) {
            // L·∫•y th√™m s√°ch t·ª´ danh s√°ch g·ªëc
            relevantBooks = documents.getContent().stream()
                .limit(3)
                .collect(Collectors.toList());
        }
        
        // Th√™m s√°ch v√†o danh s√°ch k·∫øt qu·∫£
        for (DocumentResponseDto doc : relevantBooks) {
            if (cards.size() >= 3) break;
            
            List<WebhookResponse.Button> buttons = new ArrayList<>();
            WebhookResponse.Button button = new WebhookResponse.Button(
                "Xem chi ti·∫øt",
                null,
                "GET",
                "/api/v1/documents/" + doc.getDocumentId()
            );
            buttons.add(button);
            
            WebhookResponse.Card card = new WebhookResponse.Card(
                doc.getDocumentName(),
                "T√°c gi·∫£: " + doc.getAuthor(),
                doc.getCoverImage(),
                buttons
            );
            
            cards.add(card);
        }
        
        if (cards.isEmpty()) {
            return createErrorResponse("Xin l·ªói, kh√¥ng t√¨m th·∫•y s√°ch n√†o v·ªõi ti√™u ƒë·ªÅ " + bookTitle);
        }
        
        String responseText;
        if (relevantBooks.size() > 0 && relevantBooks.get(0).getDocumentName().toLowerCase().contains(searchTitle)) {
            responseText = String.format("T√¨m th·∫•y %d s√°ch ph√π h·ª£p v·ªõi ti√™u ƒë·ªÅ '%s':", relevantBooks.size(), bookTitle);
        } else {
            responseText = String.format("Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p v·ªõi ti√™u ƒë·ªÅ '%s'. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s√°ch c√≥ th·ªÉ b·∫°n quan t√¢m:", bookTitle);
        }
        
        List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
            new WebhookResponse.QuickReply("üîç T√¨m s√°ch kh√°c", "{\"eventName\": \"SearchBookByTitle\", \"parameters\": {\"bookTitle\": \"\"}}"),
            new WebhookResponse.QuickReply("üìö M∆∞·ª£n s√°ch", "{\"eventName\": \"BorrowBook\", \"parameters\": {\"bookTitle\": \"" + bookTitle + "\"}}"),
            new WebhookResponse.QuickReply("üìñ Xem s√°ch m·ªõi", "{\"eventName\": \"SearchTopBook\", \"parameters\": {}}"),
            new WebhookResponse.QuickReply("‚è∞ Gi·ªù m·ªü c·ª≠a", "{\"eventName\": \"LibraryHours\", \"parameters\": {}}")
        );

        List<String> suggestions = Arrays.asList(
            "T√¨m s√°ch theo t√°c gi·∫£",
            "T√¨m s√°ch theo th·ªÉ lo·∫°i",
            "Xem s√°ch ƒëang m∆∞·ª£n"
        );
        
        return createSuccessResponse(
            responseText,
            quickReplies,
            cards,
            null,
            suggestions
        );
    }
    
    // T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa 2 chu·ªói
    private double calculateSimilarity(String s1, String s2) {
        if (s1 == null || s2 == null) return 0.0;
        
        // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        s1 = s1.toLowerCase().replaceAll("\\s+", "");
        s2 = s2.toLowerCase().replaceAll("\\s+", "");
        
        if (s1.equals(s2)) return 1.0;
        
        // T√≠nh ƒë·ªô d√†i c·ªßa chu·ªói ng·∫Øn nh·∫•t
        int minLength = Math.min(s1.length(), s2.length());
        if (minLength == 0) return 0.0;
        
        // ƒê·∫øm s·ªë k√Ω t·ª± gi·ªëng nhau
        int matches = 0;
        for (int i = 0; i < minLength; i++) {
            if (s1.charAt(i) == s2.charAt(i)) {
                matches++;
            }
        }
        
        // T√≠nh t·ª∑ l·ªá t∆∞∆°ng ƒë·ªìng
        return (double) matches / Math.max(s1.length(), s2.length());
    }
} 
package com.spkt.libraSys.service.chatbot.intent;

import com.spkt.libraSys.service.chatbot.IntentHandler;
import com.spkt.libraSys.service.chatbot.WebhookRequest;
import com.spkt.libraSys.service.chatbot.WebhookResponse;
import com.spkt.libraSys.service.chatbot.annotation.RequiresAuth;
import com.spkt.libraSys.service.document.DocumentService;
import com.spkt.libraSys.service.document.DocumentResponseDto;
import com.spkt.libraSys.service.document.DocumentType.DocumentTypeEntity;
import com.spkt.libraSys.service.document.course.CourseResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
@Slf4j
public class BookDetailsIntentHandler implements IntentHandler {

    @Autowired
    private DocumentService documentService;

    @Override
    public String getIntentName() {
        return "BookDetails";
    }

    @Override
    public String getToDesc() {
        return "Xem th√¥ng tin chi ti·∫øt s√°ch";
    }

    private String getCategoryDisplay(String category) {
        if (category == null) return "Ch∆∞a c·∫≠p nh·∫≠t";
        
        switch (category) {
            case "PHYSICAL":
                return "S√°ch v·∫≠t l√Ω";
            case "DIGITAL":
                return "T√†i li·ªáu s·ªë";
            case "BOTH":
                return "C·∫£ s√°ch v·∫≠t l√Ω v√† t√†i li·ªáu s·ªë";
            default:
                return category;
        }
    }

    private String getVisibilityStatusDisplay(String status) {
        if (status == null) return "Ch∆∞a c·∫≠p nh·∫≠t";
        
        switch (status) {
            case "PUBLIC":
                return "C√¥ng khai";
            case "RESTRICTED_VIEW":
                return "Xem c√≥ gi·ªõi h·∫°n";
            case "PRIVATE":
                return "Ri√™ng t∆∞";
            default:
                return status;
        }
    }

    @Override
    public WebhookResponse handle(WebhookRequest request) {
        // Ki·ªÉm tra n·∫øu request l√† t·ª´ button click
        log.info("Request from button click: {}", request);
        String buttonPayload = getStringParameter(request, "payload");
        if (buttonPayload != null) {
            return handleButtonAction(buttonPayload, request);
        }

        String bookTitle = getStringParameter(request, "book-title");
        if (bookTitle == null) {
            // Events khi ch∆∞a c√≥ t√™n s√°ch
            List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
                new WebhookResponse.QuickReply("üîç T√¨m s√°ch", "{\"eventName\": \"SearchBookByTitle\", \"parameters\": {\"bookTitle\": \"\"}}"),
                new WebhookResponse.QuickReply("üìö S√°ch m·ªõi", "{\"eventName\": \"SearchTopBook\", \"parameters\": {}}"),
                new WebhookResponse.QuickReply("‚è∞ Gi·ªù m·ªü c·ª≠a", "{\"eventName\": \"LibraryHours\", \"parameters\": {}}")
            );

            // Suggestions cho c√°c t√¨m ki·∫øm ph·ªï bi·∫øn
            List<String> suggestions = Arrays.asList(
                "T√¨m s√°ch theo t√°c gi·∫£",
                "T√¨m s√°ch theo th·ªÉ lo·∫°i",
                "Xem s√°ch ƒëang m∆∞·ª£n"
            );

            return createSuccessResponse(
                "Vui l√≤ng cung c·∫•p t√™n s√°ch c·∫ßn xem th√¥ng tin",
                quickReplies,
                null,
                null,
                suggestions
            );
        }
        
        try {
            DocumentResponseDto document = documentService.searchByTitle(bookTitle);

            if (document == null) {
                // Events khi kh√¥ng t√¨m th·∫•y s√°ch
                List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
                    new WebhookResponse.QuickReply("üîç T√¨m l·∫°i", "{\"eventName\": \"SearchBookByTitle\", \"parameters\": {\"bookTitle\": \"\"}}"),
                    new WebhookResponse.QuickReply("üìö Xem s√°ch m·ªõi", "{\"eventName\": \"SearchTopBook\", \"parameters\": {}}")
                );

                // Suggestions cho c√°c t√πy ch·ªçn kh√°c
                List<String> suggestions = Arrays.asList(
                    "Ki·ªÉm tra l·∫°i t√™n s√°ch",
                    "Xem s√°ch ph·ªï bi·∫øn",
                    "T√¨m s√°ch theo th·ªÉ lo·∫°i"
                );

                return createSuccessResponse(
                    "Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi t√™n: " + bookTitle,
                    quickReplies,
                    null,
                    null,
                    suggestions
                );
            }

            // T·∫°o card hi·ªÉn th·ªã th√¥ng tin s√°ch
            List<WebhookResponse.Button> buttons = new ArrayList<>();
            if (document.getPhysicalDocument() != null) {
                buttons.add(new WebhookResponse.Button(
                        "üìö M∆∞·ª£n s√°ch",
                        "{\"physicalDocId\": \"" + document.getPhysicalDocument().getPhysicalDocumentId() + "\"}",
                        "POST",
                        "/api/v1/loans"
                ));
            }
//            buttons.add(new WebhookResponse.Button(
//                    "üìñ ƒê·∫∑t gi·ªØ s√°ch",
//                    "{\"documentId\": \"" + document.getDocumentId() + "\", \"documentName\": \"" + document.getDocumentName() + "\", \"action\": \"reserve\"}",
//                    "POST",
//                    "/api/v1/loans/reserve"
//            ));
//            buttons.add(new WebhookResponse.Button(
//                    "üîç Xem chi ti·∫øt",
//                    "{\"documentId\": \"" + document.getDocumentId() + "\", \"documentName\": \"" + document.getDocumentName() + "\"}",
//                    "GET",
//                    "/api/v1/documents/" + document.getDocumentId()
//            ));

            List<WebhookResponse.Card> cards = Arrays.asList(
                    new WebhookResponse.Card(
                            document.getDocumentName(),
                            document.getAuthor() != null ? document.getAuthor() : "Ch∆∞a c·∫≠p nh·∫≠t",
                            document.getCoverImage() != null ? document.getCoverImage() : "https://example.com/default-cover.jpg",
                            buttons
                    )
            );

            System.out.println("================================");
            System.out.println(cards);
            System.out.println("================================");
            // Events cho c√°c h√†nh ƒë·ªông ph·ªï bi·∫øn
            List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
                new WebhookResponse.QuickReply("üìö M∆∞·ª£n s√°ch", "{\"eventName\": \"BorrowBook\", \"parameters\": {\"bookTitle\": \"" + document.getDocumentName() + "\"}}"),
                new WebhookResponse.QuickReply("üìñ ƒê·∫∑t gi·ªØ s√°ch", "{\"eventName\": \"ReserveBook\", \"parameters\": {\"bookTitle\": \"" + document.getDocumentName() + "\"}}"),
                new WebhookResponse.QuickReply("üíª T·∫£i t√†i li·ªáu s·ªë", "{\"eventName\": \"DownloadDigital\", \"parameters\": {\"bookTitle\": \"" + document.getDocumentName() + "\"}}"),
                new WebhookResponse.QuickReply("‚≠ê ƒê√°nh gi√° s√°ch", "{\"eventName\": \"RateBook\", \"parameters\": {\"bookTitle\": \"" + document.getDocumentName() + "\"}}")
            );

            // Custom data ƒë·ªÉ l∆∞u th√¥ng tin s√°ch
            Map<String, Object> customData = new HashMap<>();
            customData.put("documentName", document.getDocumentName());
            customData.put("author", document.getAuthor());
            customData.put("category", document.getDocumentCategory());

            // Suggestions cho c√°c t√πy ch·ªçn kh√°c
            List<String> suggestions = Arrays.asList(
                "T√¨m s√°ch t∆∞∆°ng t·ª±",
                "Xem s√°ch c√πng t√°c gi·∫£",
                "Xem s√°ch c√πng th·ªÉ lo·∫°i"
            );

            StringBuilder responseText = new StringBuilder();
            responseText.append("üìö Th√¥ng tin chi ti·∫øt s√°ch:\n\n");
            
            // Th√¥ng tin c∆° b·∫£n
            responseText.append("üìñ Th√¥ng tin c∆° b·∫£n:\n");
            responseText.append(String.format("- T√™n s√°ch: %s\n", document.getDocumentName()));
            responseText.append(String.format("- T√°c gi·∫£: %s\n", document.getAuthor() != null ? document.getAuthor() : "Ch∆∞a c·∫≠p nh·∫≠t"));
            responseText.append(String.format("- Nh√† xu·∫•t b·∫£n: %s\n", document.getPublisher() != null ? document.getPublisher() : "Ch∆∞a c·∫≠p nh·∫≠t"));
            responseText.append(String.format("- Ng√†y xu·∫•t b·∫£n: %s\n", document.getPublishedDate() != null ? document.getPublishedDate() : "Ch∆∞a c·∫≠p nh·∫≠t"));
            responseText.append(String.format("- Ng√¥n ng·ªØ: %s\n", document.getLanguage() != null ? document.getLanguage() : "Ch∆∞a c·∫≠p nh·∫≠t"));
            
            // Th√¥ng tin m√¥ t·∫£
            if (document.getDescription() != null && !document.getDescription().isEmpty()) {
                responseText.append("\nüìù M√¥ t·∫£:\n");
                responseText.append(document.getDescription()).append("\n");
            }
            
            // Th√¥ng tin v·∫≠t l√Ω
            if (document.getPhysicalDocument() != null) {
                responseText.append("\nüìö Th√¥ng tin v·∫≠t l√Ω:\n");
                responseText.append(String.format("- S·ªë l∆∞·ª£ng: %d\n", document.getPhysicalDocument().getQuantity()));
                responseText.append(String.format("- S·ªë l∆∞·ª£ng c√≤n l·∫°i: %d\n", document.getPhysicalDocument().getAvailableCopies()));
                if (document.getPhysicalDocument().getIsbn() != null) {
                    responseText.append(String.format("- ISBN: %s\n", document.getPhysicalDocument().getIsbn()));
                }
            }
            
            // Th√¥ng tin s·ªë
            if (document.getDigitalDocument() != null) {
                responseText.append("\nüíª Th√¥ng tin s·ªë:\n");
                responseText.append(String.format("- Tr·∫°ng th√°i truy c·∫≠p: %s\n", 
                    getVisibilityStatusDisplay(document.getDigitalDocument().getVisibilityStatus())));
            }
            
            // Th√¥ng tin ph√™ duy·ªát
            responseText.append("\n‚úÖ Th√¥ng tin ph√™ duy·ªát:\n");
            responseText.append(String.format("- Tr·∫°ng th√°i: %s\n", document.getApprovalStatus()));
            
            // Danh m·ª•c
            responseText.append("\nüè∑Ô∏è Danh m·ª•c:\n");
            responseText.append(String.format("- Lo·∫°i t√†i li·ªáu: %s\n", getCategoryDisplay(document.getDocumentCategory())));
            if (document.getDocumentTypes() != null && !document.getDocumentTypes().isEmpty()) {
                String types = document.getDocumentTypes().stream()
                    .map(DocumentTypeEntity::getTypeName)
                    .collect(Collectors.joining(", "));
                responseText.append("- Th·ªÉ lo·∫°i: ").append(types).append("\n");
            }
            if (document.getCourses() != null && !document.getCourses().isEmpty()) {
                String courses = document.getCourses().stream()
                    .map(CourseResponse::getCourseName)
                    .collect(Collectors.joining(", "));
                responseText.append("- Kh√≥a h·ªçc: ").append(courses).append("\n");
            }

            return createSuccessResponse(
                responseText.toString(),
                quickReplies,
                cards,
                customData,
                suggestions
            );
        } catch (Exception e) {
            // Events khi c√≥ l·ªói
            List<WebhookResponse.QuickReply> quickReplies = Arrays.asList(
                new WebhookResponse.QuickReply("üîÑ Th·ª≠ l·∫°i", "{\"eventName\": \"BookDetails\", \"parameters\": {\"book-title\": \"" + bookTitle + "\"}}"),
                new WebhookResponse.QuickReply("üìû Li√™n h·ªá h·ªó tr·ª£", "{\"eventName\": \"DefaultFallbackIntent\", \"parameters\": {}}")
            );

            // Suggestions cho c√°c t√πy ch·ªçn kh√°c
            List<String> suggestions = Arrays.asList(
                "Quay l·∫°i trang ch·ªß",
                "Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
                "Li√™n h·ªá th·ªß th∆∞"
            );

            return createSuccessResponse(
                "ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin s√°ch. Vui l√≤ng th·ª≠ l·∫°i sau.",
                quickReplies,
                null,
                null,
                suggestions
            );
        }
    }

    private WebhookResponse handleButtonAction(String payload, WebhookRequest request) {
        String bookTitle = getStringParameter(request, "book-title");
        if (bookTitle == null) {
            return createErrorResponse("Kh√¥ng t√¨m th·∫•y th√¥ng tin s√°ch");
        }

        try {
            DocumentResponseDto document = documentService.searchByTitle(bookTitle);
            if (document == null) {
                return createErrorResponse("Kh√¥ng t√¨m th·∫•y s√°ch");
            }

            switch (payload) {
                case "borrow_book":
                    // Quick replies cho m∆∞·ª£n s√°ch
                    List<WebhookResponse.QuickReply> borrowQuickReplies = Arrays.asList(
                        new WebhookResponse.QuickReply("‚úÖ X√°c nh·∫≠n m∆∞·ª£n", "confirm_borrow"),
                        new WebhookResponse.QuickReply("‚ùå H·ªßy", "cancel_borrow")
                    );

                    // Suggestions cho m∆∞·ª£n s√°ch
                    List<String> borrowSuggestions = Arrays.asList(
                        "Xem th·ªùi gian m∆∞·ª£n",
                        "Xem quy ƒë·ªãnh m∆∞·ª£n s√°ch",
                        "Xem s√°ch t∆∞∆°ng t·ª±"
                    );

                    // Custom data cho m∆∞·ª£n s√°ch
                    Map<String, Object> borrowCustomData = new HashMap<>();
                    borrowCustomData.put("action", "borrow");
                    borrowCustomData.put("documentName", document.getDocumentName());
                    borrowCustomData.put("documentId", document.getDocumentId());

                    return createSuccessResponse(
                        String.format("B·∫°n mu·ªën m∆∞·ª£n s√°ch '%s'?\n\n" +
                            "üìö Th√¥ng tin m∆∞·ª£n s√°ch:\n" +
                            "- Th·ªùi gian m∆∞·ª£n: 14 ng√†y\n" +
                            "- S·ªë l∆∞·ª£ng c√≤n l·∫°i: %d",
                            document.getDocumentName(),
                            document.getPhysicalDocument().getAvailableCopies()),
                        borrowQuickReplies,
                        null,
                        borrowCustomData,
                        borrowSuggestions
                    );

                case "reserve_book":
                    // Quick replies cho ƒë·∫∑t gi·ªØ s√°ch
                    List<WebhookResponse.QuickReply> reserveQuickReplies = Arrays.asList(
                        new WebhookResponse.QuickReply("‚úÖ X√°c nh·∫≠n ƒë·∫∑t gi·ªØ", "confirm_reserve"),
                        new WebhookResponse.QuickReply("‚ùå H·ªßy", "cancel_reserve")
                    );

                    // Suggestions cho ƒë·∫∑t gi·ªØ s√°ch
                    List<String> reserveSuggestions = Arrays.asList(
                        "Xem th·ªùi gian gi·ªØ s√°ch",
                        "Xem quy ƒë·ªãnh ƒë·∫∑t gi·ªØ",
                        "Xem s√°ch t∆∞∆°ng t·ª±"
                    );

                    // Custom data cho ƒë·∫∑t gi·ªØ s√°ch
                    Map<String, Object> reserveCustomData = new HashMap<>();
                    reserveCustomData.put("action", "reserve");
                    reserveCustomData.put("documentName", document.getDocumentName());
                    reserveCustomData.put("documentId", document.getDocumentId());

                    return createSuccessResponse(
                        String.format("B·∫°n mu·ªën ƒë·∫∑t gi·ªØ s√°ch '%s'?\n\n" +
                            "üìö Th√¥ng tin ƒë·∫∑t gi·ªØ:\n" +
                            "- Th·ªùi gian gi·ªØ: 3 ng√†y\n" +
                            "- S·ªë l∆∞·ª£ng c√≤n l·∫°i: %d",
                            document.getDocumentName(),
                            document.getPhysicalDocument().getAvailableCopies()),
                        reserveQuickReplies,
                        null,
                        reserveCustomData,
                        reserveSuggestions
                    );

                default:
                    return createErrorResponse("H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá");
            }
        } catch (Exception e) {
            return createErrorResponse("ƒê√£ c√≥ l·ªói x·∫£y ra: " + e.getMessage());
        }
    }
} 